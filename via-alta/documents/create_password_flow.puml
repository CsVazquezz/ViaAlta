@startuml Create Password Flow
title Via Alta - Create Password Flow

actor User
participant "CreatePassword\nComponent" as CreatePasswordComponent
participant "API Route\n/api/auth/verify-token" as VerifyAPI
participant "API Route\n/api/auth/create-password" as CreateAPI
participant "PasswordReset\nModel" as PasswordResetModel
participant "LocalUser\nModel" as LocalUserModel
participant "M2M Auth\nService" as M2MAuth
participant "Via DiseÃ±o\nAPI" as ExternalAPI
participant "Router" as Router

User -> CreatePasswordComponent: Load page with token
activate CreatePasswordComponent

CreatePasswordComponent ->> VerifyAPI: GET /api/auth/verify-token?token={token}
activate VerifyAPI
note right: async operation

VerifyAPI ->> PasswordResetModel: findByToken(token)
activate PasswordResetModel
PasswordResetModel -->> VerifyAPI: tokenData (or null)
deactivate PasswordResetModel

alt Invalid token
    VerifyAPI -->> CreatePasswordComponent: 404 Not Found
    CreatePasswordComponent --> User: Show invalid token error
else Valid token
    VerifyAPI -->> CreatePasswordComponent: 200 OK with user data
    
    User -> CreatePasswordComponent: Enter and submit new password
    CreatePasswordComponent ->> CreateAPI: POST /api/auth/create-password
    activate CreateAPI
    note right: async operation
    
    CreateAPI ->> PasswordResetModel: findByToken(token)
    activate PasswordResetModel
    PasswordResetModel -->> CreateAPI: tokenData
    deactivate PasswordResetModel
    
    CreateAPI ->> M2MAuth: authenticatedRequest()
    activate M2MAuth
    
    M2MAuth ->> ExternalAPI: POST /m2m/authenticate
    activate ExternalAPI
    ExternalAPI -->> M2MAuth: token
    deactivate ExternalAPI
    
    M2MAuth ->> ExternalAPI: GET /v1/users/find_one?ivd_id={ivdId}
    activate ExternalAPI
    ExternalAPI -->> M2MAuth: userData
    deactivate ExternalAPI
    
    M2MAuth -->> CreateAPI: userData
    deactivate M2MAuth
    
    CreateAPI ->> LocalUserModel: update or create user with new password
    activate LocalUserModel
    note right of LocalUserModel: Hash password with bcrypt
    LocalUserModel -->> CreateAPI: updatedUser
    deactivate LocalUserModel
    
    CreateAPI ->> PasswordResetModel: markTokenAsUsed(token)
    activate PasswordResetModel
    PasswordResetModel -->> CreateAPI: success
    deactivate PasswordResetModel
    
    CreateAPI -->> CreatePasswordComponent: 200 OK
    CreatePasswordComponent -> Router: push('/')
    Router --> User: Redirect to login page after delay
    deactivate CreateAPI
end

deactivate VerifyAPI
deactivate CreatePasswordComponent

@enduml